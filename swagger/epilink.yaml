openapi: 3.0.1
info:
  title: EpiLink API (beta)
  description: |
    This is the API for EpiLink, a server authentication system for Discord. It is still WIP.

    This will be the replacement for the old Docsify.js-based API documentation.

    **This document may contain mistakes. Please report them [on our GitHub repo](https://github.com/EpiLink/EpiLink). Thanks!**

    For more information on EpiLink, check out:

    - The EpiLink website: <https://epilink.zoroark.guru>

    - Additional API documentation: [here](/#/Api?). Has thorough information on topics not covered by this document.

    Please note that, unless your instance administrators decided to enable this Swagger via the EpiLink CORS whitelist, all of the APIs will fail.
  license:
    name: Mozilla Public License version 2 - no copyleft exception (Exhibit B)
    url: https://www.mozilla.org/en-US/MPL/2.0/
  version: "0.7"
servers:
  - url: "{protocol}://{backendHost}/api/v1"
    variables:
      backendHost:
        default: my.epilinkinstance.org
        description: The host name for your EpiLink instance
      protocol:
        enum:
          - http
          - https
        default: https
        description: The protocol to use.
tags:
  - name: meta
    description: Endpoints for discovering information about an instance
  - name: user
    description: Endpoints for retrieving information on the currently logged in user.
  - name: register
    description: Endpoints for the registration procedure
  - name: admin
    description: Endpoints for administrative tasks. Admin permissions are required.
paths:
  /meta/info:
    get:
      tags: [ meta ]
      summary: Returns information about the EpiLink instance
      responses:
        '200':
          description: A JSON ApiResponse containing an InstanceInformation object.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/InstanceInformation'
              example:
                success: true
                message: null
                message_i18n: null
                message_i18n_data: { }
                data:
                  title: "My Instance"
                  logo: "https://raw.githubusercontent.com/EpiLink/EpiLink/dev/assets/epilink256.png"
                  background: null
                  authorizeStub_idProvider: "https://..."
                  authorizeStub_discord: "https://..."
                  providerName: "My Identity Provider"
                  providerIcon: null
                  idPrompt: "<p>Pizza will be ordered and robots will invade if you give us your identity</p>"
                  footerUrls:
                    - name: My website
                      url: https://zoroark.guru
                    - name: Another website
                      url: https://litarvan.com
                  contacts:
                    - name: Xavier Loginard
                      email: xavier.loginard@school.edu
                    - name: Mestel Bural-Nesfa
                      email: mester@lab.school.edu

  /meta/{legalText}:
    get:
      tags: [ meta ]
      summary: Returns the requested legal text document for this instance.
      description: The terms of services or privacy policy for this EpiLink instance are returned. This can be inline HTML or a PDF document. Clients should differentiate between the two using the returned Content-Type header.
      parameters:
        - in: path
          name: legalText
          schema:
            type: string
            enum: [ "tos", "privacy" ]
            default: tos
          required: true
      responses:
        '200':
          description: OK
          content:
            application/pdf:
              schema:
                type: string
                format: binary
              example: A PDF document
            text/html:
              schema:
                type: string
                format: html
              example: <p>Some HTML</p>

  /meta/{resource}:
    get:
      tags: [ meta ]
      summary: Returns the requested resource only if said resource is configured to be self-hosted
      description: |
        This endpoint only works if the resource is set to be hosted directly the back-end instead of being hosted somewhere else. You should not use this endpoint directly, use the corresponding field in the `/meta/info` endpoint instead.

        The content type returned by this endpoint heavily depends on the server's configuration.

        Possible values are:

        - `logo`: The logo for this instance.

        - `background`: The background image for this instance

        - `idpLogo`: The identity provider's logo for this instance
      parameters:
        - in: path
          name: resource
          schema:
            type: string
            enum: [ "logo", "background", "ipdLogo" ]
            default: logo
          required: true
      responses:
        '200':
          description: OK, resource is returned.
          content:
            "*/*":
              schema:
                type: string
                format: binary
              example: Something that corresponds to the requested resource.

  /user:
    get:
      tags: [ "user" ]
      summary: Retrieve information on the logged in user
      description: |
        Use this endpoint to retrive information on the currently logged in user.

        As the session ID parameter is fully opaque, you cannot use it to know "stuff" on the user. Use this endpoint to
        discover information on them.
      security:
        - SessionId: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserInformation'
              example:
                success: true
                message: null
                message_i18n: null
                message_i18n_data: { }
                data:
                  discordId: "1234567890"
                  username: "TheUser#1324"
                  avatarUrl: null
                  identifiable: true
                  privileged: false
        '401':
          $ref: '#/components/responses/UserUnauthorized'

  /user/logout:
    post:
      tags: [ user ]
      summary: Log a user out and invalidate their session
      description: |
        Log a user out and invalidate the given `SessionId`. A new session ID can be obtained through the Registration
        flow.
      security:
        - SessionId: [ ]
      responses:
        '200':
          description: OK -- User was logged out and SessionId is no longer valid. Data is always null in this case.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiEmptyResponse'
        '401':
          $ref: '#/components/responses/UserUnauthorized'

  /user/idaccesslogs:
    get:
      tags: [ "user" ]
      summary: Retrieve the identity access logs for the logged in user
      description: |
        This endpoint returns a list of all the identity accesses made against this user.
      security:
        - SessionId: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/IdAccessLogs'
              example:
                success: true
                message: null
                message_i18n: null
                message_i18n_data: { }
                data:
                  manualAuthorsDisclosed: false
                  accesses:
                    - automated: true
                      author: EpiLink Bot Services
                      reason: Used your name to order pizza
                      timestamp: '2020-12-23T10:15:30Z'
                    - automated: false
                      author: Someone
                      reason: You looked sus
                      timestamp: '2020-12-11T20:12:23Z'

        '401':
          $ref: '#/components/responses/UserUnauthorized'

  /user/identity:
    post:
      tags: [ user ]
      security:
        - SessionId: [ ]
      summary: Add an identity to the account
      description: |
        This endpoint uses the provided ID Provider authorization code to record the e-mail address of the account in
        the database. Note that the ID Provider account retrieved via the authorization code must be the one that was
        used for creating the account in the first place -- otherwise, the operation fails with a 112 error code.

        Note that the back-end will always consume the authorization code, although it will discard the retrieved token
        immediately in case of an error (e.g. identity already known).

        Triggers a global role update for the user on success.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationAuthCode'
      responses:
        '200':
          description: OK -- Identity was linked to the account and the account is now identifiable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiEmptyResponse'
        '401':
          $ref: '#/components/responses/UserUnauthorized'
        '400':
          description: An error happened, usually error codes 102, 110 or 112.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
              examples:
                '102':
                  summary: 102 - Invalid authorization code
                  description: The provided authorization code was invalid or rejected.
                  value:
                    success: false
                    message: "Invalid authorization code"
                    message_i18n: "err.102"
                    message_i18n_data: { }
                    data:
                      code: 102
                      message: "Invalid authorization code"
                '110':
                  summary: 110 - Identity already there
                  description: Can't set the identity for this account as one was already present.
                  value:
                    success: false
                    message: "The identity of this account is already registered in the database"
                    message_i18n: "err.110"
                    message_i18n_data: { }
                    data:
                      code: 110
                      message: "The identity of this account is already registered in the database"
                '112':
                  summary: 112 - Account mismatch
                  description: |
                    The account used here is not the same as the one that was used to create this account and was thus
                    rejected.
                  value:
                    success: false
                    message: "This account's identity does not match the new one"
                    message_i18n: "err.112"
                    message_i18n_data: { }
                    data:
                      code: 112
                      message: "This account's identity does not match the new one"
    delete:
      tags: [ user ]
      security:
        - SessionId: [ ]
      summary: Removes a user's identity from the database
      description: |
        This request does not have a body.

        Deletes a user's identity from the instance. The instance will "forget" about the user's identity.

        Updates the Discord roles of the user if successful.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiEmptyResponse'
        '401':
          $ref: '#/components/responses/UserUnauthorized'
        '400':
          description: An error occured. This will usually be in the form of a 111 error (identity was already absent)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
              example:
                success: false
                message: "The identity of this account already does not exist in the database"
                message_i18n: "err.111"
                message_i18n_data: { }
                data:
                  code: 111
                  message: "The identity of this account already does not exist in the database"

  /register/info:
    get:
      # TODO document behavior if RegisterSessionId doesn't work
      tags: [ register ]
      summary: Get the state of the registration
      description: |
        Returns the current state of the registration for the given `RegisterSessionId`. If no value or an invalid value is provided for this
        header, a new registration session is created and its header is returned.

        More examples for the 200 response can be found at `POST /register/authcode`.
      parameters:
        - $ref: '#/components/parameters/RegisterSessionId'
      responses:
        '200':
          description: OK -- Registration session information is returned
          headers:
            RegisterSessionId:
              schema:
                type: string
                format: base64url
              description: The registration session's ID.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/RegistrationInformation'
              example:
                success: true
                message: null
                message_i18n: null
                message_i18n_data: { }
                data:
                  discordUsername: "Hello#1234"
                  discordAvatarUrl: "https://my.discord.example.org/avatar.png"
                  email: "myemail.com"

  /register:
    post:
      # TODO document error behavior
      tags: [ register ]
      summary: Complete the registration procedure
      description: |
        Completes the registration procedure associated with the given `RegisterSessionId`.

        This directly logs the user in upon success.
      parameters:
        - $ref: '#/components/parameters/RegisterSessionIdRequired'
      requestBody:
        required: true
        description: Additional registration information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdditionalRegistrationOptions'
            example:
              keepIdentity: true
      responses:
        '200':
          description: OK -- Registration is successful.
          headers:
            SessionId:
              description: The newly created session ID that corresponds to the created account.
              schema:
                type: string
                format: base64url
              required: true
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - $ref: '#/components/schemas/NullDataContainer'
              example:
                success: true
                message: "Account created, logged in."
                message_i18n: "reg.acc"
                message_i18n_data: { }
                data: null

    delete:
      # TODO document error behavior
      tags: [ register ]
      summary: Cancel the registration procedure
      description: |
        Aborts the registration procedure associated with the given `RegisterSessionId`. Clears all session information from the back-end.
      parameters:
        - $ref: '#/components/parameters/RegisterSessionIdRequired'
      responses:
        '200':
          description: OK -- Registration session has been deleted.

  /register/authcode/{service}:
    post:
      # TODO document error cases
      tags: [ register ]
      summary: Submit an authorization code
      description: |
        Submit an authorization code as part of the registration procedure.

        In order to complete the submission procedure, two authorization codes must be provided:

        - One from the identity provider

        - One from Discord

        You basically have to do the first part of the authorization code flow. The URL to use to acquire the
        authorization code is provided in `GET /meta/info`.

        Check the EpiLink documentation for more information on the procedure.
      parameters:
        - name: service
          description: |
            The service that should be used. Possible values are:
              - idProvider: The identity provider for this instance
              - discord: Discord for this instance.
          required: true
          in: path
          schema:
            type: string
            enum:
              - idProvider
              - discord
      requestBody:
        required: true
        description: The authorization code.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationAuthCode'
      responses:
        '200':
          description: |
            OK -- See attached object for info on procedure.

            - If `next` is `login`, the user has been logged in, check the `SessionId` header.

            - If `next` is `continue`, the procedure can continue.
          headers:
            SessionId:
              description: If `next` is `login`, this is the newly created user session.
              schema:
                type: string
                format: base64url
              required: false
            RegisterSessionId:
              description: |
                If `next` is `continue` and no `RegisterSessionId` was provided, this is the new registration session
              schema:
                type: string
                format: base64url
              required: false
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/RegistrationContinuation'
              examples:
                Discord:
                  summary: Discord only, continue
                  description: |
                    This value can be found upon a successful connection to Discord.

                    EpiLink does not know about the account, so `next` is set to `continue`.
                  value:
                    success: true
                    message: null
                    message_i18n: null
                    message_i18n_data: { }
                    data:
                      next: continue
                      attachment:
                        discordUsername: 'me#1234'
                        discordAvatarUrl: 'https://...'
                        email: null
                DiscordLoggedIn:
                  summary: Logged in
                  description: |
                    Happens upon a successful connection to Discord, but EpiLink already know this account
                    (`next` = `login`)

                    The registration session is deleted and a new regular user session is opened with the `SessionId`
                    resonse header.
                  value:
                    success: true
                    message: Logged in
                    message_i18n: "reg.lgi"
                    message_i18n_data: { }
                    data:
                      next: login
                      attachment: null
                IdProvider:
                  summary: Identity provider only, continue
                  description: |
                    This value can be found after logging into the identity provider account.
                  value:
                    success: true
                    message: null
                    message_i18n: null
                    message_i18n_data: { }
                    data:
                      next: continue
                      attachment:
                        discordUsername: null
                        discordAvatarUrl: null
                        email: 'this.is.my.email@example.edu'
                BothOk:
                  summary: Identity provider and Discord both OK
                  description: |
                    At this point, the server knows about both the Identity Provider identity and Discord identity.
                    The registration procedure can be concluded.
                  value:
                    success: true
                    message: null
                    message_i18n: null
                    message_i18n_data: { }
                    data:
                      next: continue
                      attachment:
                        discordUsername: 'me#1234'
                        discordAvatarUrl: 'https://...'
                        email: 'this.is.my.email@example.edu'

  /admin/idrequest:
    post:
      tags: [ admin ]
      summary: Request the identity of a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdRequest'
            example:
              target: "1234567890912934"
              reason: "Checking your identity for our hand-made procedure 17-B."
      security:
        - SessionId: [ ]
      responses:
        '200':
          description: OK -- Here's the identity.
          content:
            application/json:
              # TODO no, this returns an ApiResponse, not the object directly
              # TODO this mistake is also in other places RIP
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/IdRequestResult'
              example:
                message: null
                message_i18n: null
                message_i18n_data: [ ]
                data:
                  target: "1234567890912934"
                  identity: "someone@example.com"
        '401':
          $ref: '#/components/responses/AdminOrUserUnauthorized'
        '404':
          $ref: '#/components/responses/AdminEndpointsDisabled'

  /admin/user/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: snowflake
    get:
      # TODO document behavior with unknown user
      tags: [ admin ]
      security:
        - SessionId: [ ]
      summary: Retrieve information about a user
      description: |
        Get information about a registered user. The returned data is not the same as what's returned by the
        `GET /user` operation, which relies on some session-based info.
      responses:
        '200':
          description: OK -- here is the information for this user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisteredUserInformation"
              example:
                discordId: '1234568819283754'
                idpIdHash: 'haeyhEx34=='
                created: '2014-09-02T08:05:23.653Z' # not a realistic date but i was too lazy to find a real one
                identifiable: true
        '400':
          $ref: '#/components/responses/TargetUserDoesNotExist'
        '401':
          $ref: '#/components/responses/AdminOrUserUnauthorized'
        '404':
          $ref: '#/components/responses/AdminEndpointsDisabled'

    delete:
      tags: [ admin ]
      security:
        - SessionId: [ ]
      summary: Delete a user account
      description: |
        Deletes the given user's account from this instance. This does not ban the user -- they will be
        able to recreate one.

        Upon success, triggers a role update for the user.
      responses:
        '200':
          description: OK -- User was deleted
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - $ref: '#/components/schemas/NullDataContainer'
              example:
                success: true
                message: "User deleted"
                message_i18n: "adm.ud"
                message_i18n_data: { }
                data: null
        '400':
          $ref: '#/components/responses/TargetUserDoesNotExist'
        '401':
          $ref: '#/components/responses/AdminOrUserUnauthorized'
        '404':
          $ref: '#/components/responses/AdminEndpointsDisabled'

  /admin/ban/{idpIdHash}:
    parameters:
      - name: idpIdHash
        description: An identity hash
        in: path
        required: true
        schema:
          type: string
          format: base64url
    get:
      tags: [ admin ]
      summary: Get the bans of a user
      security:
        - SessionId: [ ]
      responses:
        '200':
          description: OK -- Here are the bans for this user
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserBans'
        '400':
          $ref: '#/components/responses/TargetUserDoesNotExist'
        '401':
          $ref: '#/components/responses/AdminOrUserUnauthorized'
        '404':
          $ref: '#/components/responses/AdminEndpointsDisabled'

    post:
      tags: [ admin ]
      summary: Create a ban against a user
      description: |
        Creates a ban against a user. If said ban succeeds, refreshes the user's roles. The user may be notified
        depending on the instance settings.

        Bans are made against an identity hash.
      security:
        - SessionId: [ ]
      requestBody:
        $ref: '#/components/schemas/BanRequest'
      responses:
        '200':
          description: OK -- Ban has been created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/BanInfo'
        '400':
          $ref: '#/components/responses/TargetUserDoesNotExist'
        '401':
          $ref: '#/components/responses/AdminOrUserUnauthorized'
        '404':
          $ref: '#/components/responses/AdminEndpointsDisabled'

  /admin/ban/{idpIdHash}/{banId}:
    parameters:
      - name: idpIdHash
        description: An identity hash
        in: path
        required: true
        schema:
          type: string
          format: base64url
      - name: banId
        description: The ID of the ban
        in: path
        required: true
        schema:
          type: string
          format: base64url
    get:
      tags: [admin]
      summary: Get a single ban of a specific user
      security:
        - SessionId: [ ]
      responses:
        '200':
          description: OK -- Here is the ban
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/BanInfo'
        '400':
          $ref: '#/components/responses/TargetUserDoesNotExist'
        '401':
          $ref: '#/components/responses/AdminOrUserUnauthorized'
        '404':
          $ref: '#/components/responses/AdminEndpointsDisabled'

  /admin/ban/{idpIdHash}/{banId}/revoke:
    parameters:
      - name: idpIdHash
        description: An identity hash
        in: path
        required: true
        schema:
          type: string
          format: base64url
      - name: banId
        description: The ID of the ban
        in: path
        required: true
        schema:
          type: string
          format: base64url
    post:
      tags: [admin]
      summary: Revokes a ban
      security:
        - SessionId: [ ]
      responses:
        '200':
          description: OK -- Ban revoked. The user's roles are re-evaluated if this ban was currently in effect.
        '400':
          $ref: '#/components/responses/TargetUserDoesNotExist'
        '401':
          $ref: '#/components/responses/AdminOrUserUnauthorized'
        '404':
          $ref: '#/components/responses/AdminEndpointsDisabled'

  /admin/search/{criteria}/{term}:
    parameters:
      - name: criteria
        description: The criteria to choose from
        in: path
        required: true
        schema:
          type: string
          enum: [ hash16 ]
      - name: term
        description: The words the search will be done on
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [admin]
      summary: Search users
      security:
        - SessionId: [ ]
      description: |
        Looks for users based on the given criteria and term. The criteria can be:

        - hash16: Search users by a hex representation of their identity hash. The search term can be a substring of the
          actual id.
      responses:
        '200':
          description: OK -- Results below
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResult'
        '401':
          $ref: '#/components/responses/AdminOrUserUnauthorized'
        '404':
          $ref: '#/components/responses/AdminEndpointsDisabled'

  /admin/gdprreport/{targetId}:
    parameters:
      - name: idpIdHash
        description: An identity hash
        in: path
        required: true
        schema:
          type: string
          format: base64url
    post:
      tags: [admin]
      summary: Generate a GDPR report about the target
      security:
        - SessionId: [ ]
      description: |
        Returns a GDPR report for the given person, directly as a Markdown document. This generates an identity access notification for manual access.
      responses:
        '200':
          description: OK -- Results below
          content:
            text/markdown:
              example: |
                Here is the GDPR report.
        '401':
          $ref: '#/components/responses/AdminOrUserUnauthorized'
        '404':
          $ref: '#/components/responses/AdminEndpointsDisabled'
components:
  schemas:
    # ---------------------- general schemas ----------------------
    ApiResponse:
      type: object
      description: Almost all API endpoints return something of this form. Endpoints will inject their resulting data in an additional "data" property
      properties:
        success:
          type: boolean
        message:
          type: string
        message_i18n:
          type: string
        message_i18n_data:
          type: object
          additionalProperties:
            type: string
    NullDataContainer:
      type: object
      properties:
        data:
          type: object
          nullable: true
    ErrorData:
      type: object
      description: The "data" field for errors (when success is false in an apiresponse)
      properties:
        code:
          type: integer
        description:
          type: string
    ApiErrorResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/ErrorData'
    ApiEmptyResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: object
              nullable: true
          example:
            success: true
            message: null
            message_i18n: null
            message_i18n_data: { }
            data: null

    # ---------------------- /meta schemas ----------------------
    InstanceInformation:
      type: object
      properties:
        title:
          type: string
          description: The name of the instance
        logo:
          type: string
          format: url
          description: A URL to the logo of the instance, either absolute (`https://...`) or with a leading /, indicating that it is under the back-end's hostname.
          nullable: true
        background:
          type: string
          format: url
          description: A URL to the background image for this instance, same format as for the logo.
          nullable: true
        authorizeStub_idProvider:
          type: string
          format: url
          description: |
            The value for both `authorizeStub` properties are OAuth2 authorization links (the ones you use for retrieving an authorization code) that are only missing a redirect URI. Append your own URI there. Don't forget to encode it as a URI component to properly escape special characters! (i.e. append `&redirect_uri=https://myexample.com/...` to the `authorizeStub` field).

            This property is for the identity provider (e.g. Microsoft, Google, ...)
        authorizeStub_discord:
          type: string
          format: url
          description: |
            Same use as `authorizeStub_idProvider`, but this one is for Discord.
        providerName:
          type: string
          description: |
            The display name for the identity provider. Human-friendly.
        providerIcon:
          type: string
          format: url
          description: |
            The icon for the identity provider, same format as for `logo`.
          nullable: true
        idPrompt:
          type: string
          format: html
          description: |
            The text that should be shown below the "I want EpiLink to rememver my identity" checkbox.
            This is inline HTML that is meant to be embedded within a web page.
        footerUrls:
          type: array
          items:
            $ref: '#/components/schemas/FooterUrl'
          description: |
            Footer URL's that should be displayed on the front-end.
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/ContactInformation'
          description: |
            Contact information for the maintainers of the EpiLink instance
    FooterUrl:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
    ContactInformation:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
    # ---------------------- /user schemas ----------------------
    UserInformation:
      description: Information about the currently logged in user
      type: object
      properties:
        discordId:
          type: string
          description: The ID of the user. This is stored in the instance's database.
        username:
          type: string
          description: The user's Discord username (Hello#1234). This is stored as part of the session and is not stored in the instance's database.
        avatarUrl:
          type: string
          format: url
          nullable: true
          description: The possibly null URL for the Discord avatar of the user
        identifiable:
          type: boolean
          description: If true, the user has their identity recorded in the database, false otherwise.
        privileged:
          type: boolean
          description: |
            True if the user is privileged (i.e. is recorded as an administrators in the instance configuration).

            This does not necessarily indicate that the user can actually perform administration actions, as additional
            checks are performed when an admin tries to user their privileges. This should only be used for displaying
            some sort of "admin" badge on the user.
    IdAccessLogs:
      description: List of idenity accesses made against a user
      type: object
      properties:
        manualAuthorsDisclosed:
          type: boolean
          description: |
            This value is only intended to be used for displaying a message to tell the user that not seeing the name of
            who made the identity access is normal (true if so, false otherwise). This does not actually determine
            whether the author of all the listed accesses is actually available or not.
        accesses:
          type: array
          items:
            $ref: '#/components/schemas/IdAccess'
          description: Identity accesses made against this account.
    IdAccess:
      description: Details for a single identity access
      type: object
      properties:
        automated:
          type: boolean
          description: True if the access was made by a bot, false if it was made manually by a administrator
        author:
          type: string
          nullable: true
          description: |
            The name of the author

            No particular format is guaranteed, but this name should be enough for a human to distinguish who made the
            request. Null if the author is not available to the user -- while the author is always logged on the
            back-end, a policy can be set to prevent users from accessing the identity of the requester in specific
            cases.
        reason:
          type: string
          description: The human-readable reason for the access. Again, no particular format is guaranteed.
        timestamp:
          type: string
          format: 'date-time'
          description: An ISO-8601 timestamp of when the request happened, always in UTC (`z` or `Z` at the end)
    # ---------------------- /register schemas ----------------------
    RegistrationAuthCode:
      description: Used for sending an OAuth2 authentication code
      type: object
      properties:
        code:
          type: string
          description: The OAuth2 authentication code itself
        redirectUri:
          type: string
          format: url
          description: |
            The exact `redirect_uri` that was used for the original authentication request that obtained the code. This is
            required for security reasons, the back-end does not redirect anything to this URI.
      example:
        code: "123code456"
        redirectUri: "https://some.website.com/oauth2/somethingsomething"

    RegistrationInformation:
      description: |
        This object provides information on the current registration process' status and information. It can be obtained by
        calling  `GET /register/info` and can be found in the responses of most registration endpoints.
      type: object
      properties:
        discordUsername:
          type: string
          nullable: true
          description: |
            The discord username associated with the current registration process, or null if no Discord account is recorded in
            the current regsitration process.
        discordAvatarUrl:
          type: string
          format: url
          nullable: true
          description: |
            The URL to the avatar of the Discord user. This may be null if the user does not have an avatar, or if no Discord
            account is recorded in the current registration process.
        email:
          type: string
          format: url
          nullable: true
          description: |
            The user's email address, as provided by the OpenID Connect ID Token, or null if the ID Provider account has not
            been recorded in the current registration process.
        presentOnMonitoredServers:
          type: boolean
          nullable: true
          description: |
            True if the registration Discord account is present on monitored servers (i.e. the account is on a server where
            the EpiLink Discord bot is actively managing roles), false otherwise, null if the registration process does
            not have information on the person's Discord ID yet.
    AdditionalRegistrationOptions:
      description: |
        These options are provided to finalize the registration process.
      type: object
      properties:
        keepIdentity:
          type: boolean
          description: |
            True if the identity of the user should be kept once their account has been created, false otherwise.
    RegistrationContinuation:
      description: |
        Gives information on what to do next in the registration process.
        The attachment field is `null` if `next` is `login` or a `RegistrationInformation` object otherwise.
      type: object
      properties:
        next:
          type: string
          enum:
            - continue
            - login
          description: |
            "continue" if the registratino process should continue, "login" if the user has been logged in.
        attachment:
          allOf:
            - nullable: true
            - $ref: '#/components/schemas/RegistrationInformation'

    # ---------------------- /admin schemas ----------------------
    IdRequest:
      description: |
        A request for an identity
      type: object
      properties:
        target:
          type: string
          format: snowflake
          description: The Discord ID of the user whose identity should be retrieved
        reason:
          type: string
          description: The reason for the identity access.
    IdRequestResult:
      description: The result for an identity request
      type: object
      properties:
        target:
          type: string
          format: snowflake
          description: The Discord ID of the user whose identity should be retrieved
        identity:
          type: string
          format: email
          description: The identity (i.e. identity provider email address) of the user.
    RegisteredUserInformation:
      description: Information for a registered user
      type: object
      properties:
        discordId:
          type: string
          format: snowflake
          description: The Discord ID of the user
        idpIdHash:
          type: string
          format: base64url
          description: |
            The URL-safe Base64 encodeded hash of the user identity from the identity provider.

            Note that this does not correspond to a hash of the user's email.
        created:
          type: string
          format: date-time
          description: |
            The time at which the user's account was created on this EpiLink instance.
        identifiable:
          type: boolean
          description: |
            True if the user has their identity recorded in the database.
    UserBans:
      description: Bans against a specific user
      type: object
      properties:
        banned:
          type: boolean
          description: True if there are any bans considered active against this user, false otherwise.
        bans:
          type: array
          items:
            $ref: '#/components/schemas/BanInfo'
          description: Possibly empty array of all the bans against a user.
    BanInfo:
      description: Information on a specific ban
      type: object
      properties:
        id:
          type: integer
          description: The internal ID of this ban. Used in several API paths.
        revoked:
          type: boolean
          description: |
            True if the ban was manually revoked, false otherwise
        author:
          type: string
          description: |
            The author of the ban in a human-readable format. This may not always be disclosed to a user.
        reason:
          type: string
          description: |
            The (human-readable) reason for the ban
        issuedAt:
          type: string
          format: date-time
          description: |
            The timestamp of when the ban was issued.
        expiresOn:
          type: string
          format: date-time
          nullable: true
          description: |
            The timestamp of when the ban will expire, or null if the ban does not expire.
    BanRequest:
      description: A request for banning someone
      type: object
      properties:
        reason:
          type: string
          description: The reason for the ban
        expiresOn:
          type: string
          format: date-time
          nullable: true
          description: |
            The timestamp at which the ban should expire, or null if the ban should never expire.
    SearchResult:
      description: The results of a search.
      type: object
      properties:
        result:
          type: array
          items:
            type: string
            format: snowflake
          description: |
            A list of all matching user Discord ID's

  examples:
    UserUnauthorized:
      summary: "300 - Authentication required"
      description: Missing or invalid `SessionId`
      value:
        success: false
        message: "You need authentication to be able to access this resource"
        message_i18n: "err.300"
        message_i18n_data: { }
        data:
          code: 300
          description: "You need authentication to be able ot access this resource"
    AdminUnauthorized:
      summary: "301 - Not an admin"
      description: The logged in user is not an administrator
      value:
        success: false
        message: "You do not have permission to do that."
        message_i18n: "err.301"
        message_i18n_data: { }
        data:
          code: 301
          description: "You do not have permission to do that"
    AdminNotIdentifiable:
      summary: "301 - Admin not identifiable"
      description: The logged in user is an administrator but does not have their identity recorded.
      value:
        success: false
        message: "You need to have your identity recorded to perform administrative tasks"
        message_i18n: "sc.ani"
        message_i18n_data: { }
        data:
          code: 301
          description: "You do not have permission to do that"
  responses:
    UserUnauthorized:
      description: Missing or invalid `SessionId`
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorResponse'
          examples:
            UserUnauthorized:
              $ref: '#/components/examples/UserUnauthorized'
    AdminOrUserUnauthorized:
      description: |
        Authentication failure.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorResponse'
          examples:
            UserUnauthorized:
              $ref: '#/components/examples/UserUnauthorized'
            AdminUnauthorized:
              $ref: '#/components/examples/AdminUnauthorized'
            AdminNotIdentifiable:
              $ref: '#/components/examples/AdminNotIdentifiable'
    AdminEndpointsDisabled:
      description: |
        Admin endpoints are disabled in the instance's config.
    TargetUserDoesNotExist:
      description: |
        The given target user does not exist.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorResponse'
          example:
            success: false
            message: "Target user does not exist."
            message_i18n: "err.402"
            message_i18n_data: { }
            data:
              code: 402
              description: "Target user does not exist."
  securitySchemes:
    SessionId:
      type: apiKey
      in: header
      name: SessionId

  parameters:
    RegisterSessionId:
      name: RegisterSessionId
      in: header
      schema:
        type: string
        format: base64url
      required: false
    RegisterSessionIdRequired:
      name: RegisterSessionId
      in: header
      schema:
        type: string
        format: base64url
      required: true
